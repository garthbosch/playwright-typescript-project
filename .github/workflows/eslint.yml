# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Eslinter

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        node-version: [19.8.1]
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Setup SonarQube
      if: ${{ matrix.os != 'windows-latest' }}
      uses: warchant/setup-sonar-scanner@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - name: Get yarn cache path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"
    - name: Restore node_modules
      uses: actions/cache@v3
      with:
        path: |
          ${{ steps.yarn-cache-dir-path.outputs.dir }}
          node_modules
          */*/node_modules
        key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
    - name: Authenticating to npm
      run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_AUTH_TOKEN }}" > .npmrc
    - name: Install dependencies
      run: yarn add @opengov/og-playwright && yarn install
    - name: Build and Linting
      run: yarn build && yarn lint
    - name: Sonar analysis
      if: ${{ matrix.os != 'windows-latest' }}
      run: sonar-scanner
        -Dsonar.host.url=${{ secrets.SONAR_EXTERNAL_URL }}
        -Dsonar.login=${{ secrets.SONAR_API_TOKEN }}
