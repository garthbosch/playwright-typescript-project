name: Playwright-Tests-Runner
on:
  workflow_call:
    inputs:
      environment:
        type: string
        description: Test environment
        default: integration
        required: true
      grep:
        type: string
        description: Filter test by grep E.g. - @end2endtest or @smoketest or @nightlytest or @regressiontest
        default: '@regression'
        required: false
      browsers:
        type: string
        description: Type of browser to run the tests on. The first value will be the default
      workers:
        type: string
        description: number of parallel workers
        default: '1'
        required: false
        
jobs:
  test:
    name: Run Tests and Publish Allure Reports
    permissions:
      id-token: none
      contents: read # This is required for actions/checkout
    timeout-minutes: 360
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22.6.0'
          cache: 'npm' # Automatically caches `~/.npm` for dependencies

      # Step 3: Cache node_modules
      - name: Cache node_modules
        uses: actions/cache@v3
        id: node-modules-cache
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-
      
      # Step 4: Install dependencies
      - name: Install dependencies
        run: npm install 
      
      # Step 5: Cache Playwright browsers
      - name: Cache Playwright browsers
        uses: actions/cache@v3
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-
      
    # Step 6: Install Playwright Browsers
      - name: Install Playwright Browsers
        run: npx playwright install

    # Step 7: Run tests
      - name: Run Playwright Tests
        run: npm run test -- --grep ${{ inputs.grep }} ${{ inputs.browsers }} --workers=${{ inputs.workers }}
        env:
          GREP: ${{ inputs.grep }}
          retry_test: "true"
          workers: ${{ inputs.workers }}

    # Step 8: Upload Junit Artifacts (optional)
      - name: Upload Junit Test Results
        if: always() # Run this step even if tests fail
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results/

    # Step 9: Upload Playwright Artifacts (optional)
      - name: Upload Playwright Test Results
        if: always() # Run this step even if tests fail
        uses: actions/upload-artifact@v4
        with:
          name: playwright-reports
          path: ${{ github.workspace }}/**/playwright-reports/html/
          retention-days: 10

    # Step 10: Upload Allure Results Artifacts
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: allure-results
          path: |
            ${{ github.workspace }}/**/allure-results
            !${{ github.workspace }}/**/allure-results/**/*.png
            !${{ github.workspace }}/**/allure-results/**/*.ZIP
          retention-days: 10

    # Step 11: Publish Junit Artifacts (optional)
      - name: Publish Junit Report
        uses: mikepenz/action-junit-report@v3
        if: always()
        with:
          report_paths: 'test-results/junit/junit-result.xml'  

    # Step 12: Get Allure History
      - name: Get Allure history
        uses: actions/checkout@v3
        if: always()
        continue-on-error: true
        with:
          token: ${{ secrets.GEE_SECRETS }}
          path: gh-pages
          ref: gh-pages

    # Step 13: Upload Allure Reports
      - name: Upload Allure Reports
        uses: simple-elf/allure-report-action@master
        if: always()
        id: allure-report
        with:
          allure_results: allure-results
          gh_pages: gh-pages
          allure_report: allure-report
          allure_history: allure-history
          subfolder: ${{ github.workflow }}
          report_url: https://github.com/garthbosch/playwright-typescript-project/${{ github.workflow }}
          keep_reports: 10

    # Step 14: Deploy report to Github Pages      
      - name: Deploy report to Github Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v3
        with:
          personal_token: ${{ secrets.GEE_SECRETS }}
          publish_branch: gh-pages
          publish_dir: allure-history
          force_orphan: true 

  publishAllureLink:
    if: ${{ (failure() || success()) }}
    name: Adding Link to Allure Report
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Create Allure Reports Link
        run: echo 'https://github.com/garthbosch/playwright-typescript-project/${{ github.workflow }}/${{ github.run_number }}' >> $GITHUB_STEP_SUMMARY
